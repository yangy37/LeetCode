class Solution {
    final int count = 6; // normal surface area for one
    public int surfaceArea(int[][] grid) {
        int sum = 0;
        for(int[] g : grid) {
            for(int e : g) {
                if(e <= 0) continue;
                sum += e * count - (e-1) * 2;
            }
        }
        int rows = grid.length;
        int cols = grid[0].length;
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                sum -= cal(grid, i, j, rows,cols);
            }
        }
        return sum;
    }
    
    private int cal(int[][] grid, int i, int j, int rows, int cols) {
        int c = 0;
        if(i+1 >= 0 && i+1 < rows) {
            int min = Math.min(grid[i][j], grid[i+1][j]);
            c += min * 2;
        }
        if(j-1 >= 0 && j-1 < cols) {
            int min = Math.min(grid[i][j], grid[i][j-1]);
            c += min * 2;
        }
        return c;
    }
}
