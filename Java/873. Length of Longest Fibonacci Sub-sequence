class Solution {
//     public int lenLongestFibSubseq(int[] A) {
//         int N = A.length;
//         Map<Integer, Integer> index = new HashMap();
//         for (int i = 0; i < N; ++i)
//             index.put(A[i], i);

//         Map<Integer, Integer> longest = new HashMap();
//         int ans = 0;

//         for (int k = 0; k < N; ++k)
//             for (int j = 0; j < k; ++j) {
//                 int i = index.getOrDefault(A[k] - A[j], -1);
//                 if (i >= 0 && i < j) {
//                     // Encoding tuple (i, j) as integer (i * N + j)
//                     int cand = longest.getOrDefault(i * N + j, 2) + 1;
//                     longest.put(j * N + k, cand);
//                     ans = Math.max(ans, cand);
//                 }
//             }

//         return ans >= 3 ? ans : 0;
//     }
    
    public int lenLongestFibSubseq(int[] A) {
        int n = A.length;
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();        
        int[][] dp = new int[n][n];
        for(int i=0; i<n; i++) {
            map.put(A[i], i);
        }
        for(int i=0; i<n; i++) {
            for(int j=i+1; j<n; j++) {
                Integer idx = map.get(A[i] + A[j]);
                if(idx!=null) {
                    dp[j][idx] = (dp[i][j] == 0 ? 2 : dp[i][j]) + 1;
                    max = Math.max(max, dp[j][idx]);
                }
            }
        }
        return max;
    }
}
