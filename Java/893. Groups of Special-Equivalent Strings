class Solution {
    public int numSpecialEquivGroups(String[] A) {
        Set<String> set = new HashSet<>();
        for (String a : A) {
            set.add(encode(a));
        }
        return set.size();
    }
    
    private String encode(String s) {
        int even = 0;
        int odd = 1;
        char[] evenArr = s.length() % 2 == 1 ? new char[s.length() / 2 + 1] : new char[s.length() / 2];
        char[] oddArr = new char[s.length() / 2];
        for (int i = 0; i < evenArr.length; i++) {
            evenArr[i] = s.charAt(even);
            even += 2;
        }
        for (int j = 0; j < oddArr.length; j++) {
            oddArr[j] = s.charAt(odd);
            odd += 2;
        }
        Arrays.sort(evenArr);
        Arrays.sort(oddArr);
        StringBuilder sb = new StringBuilder();
        sb.append(new String(evenArr)).append(",").append(new String(oddArr));
        return sb.toString();
    }
}
